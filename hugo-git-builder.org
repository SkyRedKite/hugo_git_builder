#+title: Hugo Git Builder
#+property: header-args:python :tangle test.py
#+startup: overview

Run M-x org-babel-tangle (C-c C-v t) to generate init.el file.
Mark code sections with ':tangle no' to exclude them from export.

* About

This is an attempt to use an org file to do a form of literate
programming.  Will need to add more about info...

This attempt is beginning with an existing program that has been
imported into this literate format.  As such it is not very 'literate'
yet.  Part of the motivation for doing this is that I need to go back
and rework parts of the program to be a little more flexible.  As I
relearn how the program works I intend to either capture that in the
commentary or improve how it works (and capture that).  I am also
preparing to post this publicly as a possible useful tool for other
Hugo users.  It may be useful talk about how I am transforming the
program through multiple post?

** Purpose

There are other ways (e.g. github actions) to achieve a similar
purpose to what this file accomplishes, but not of them seem to
address the specific use case and needs that I have.  The goals of
this script are:

- Gnerate a static website from a Hugo config
- Run daily so that post could be finalized in advance with a spefic
  publication date.

* Code Preamble

Information about the program that will be exported into the code's
preamble so that anyone looking at the resultant code where understand
where it has come from.

#+begin_src python
  #!/usr/bin/python3
  #
  # hugo git builder
  # version 0.2
  #
  # Description: Intended as a server script that runs either from a cron job
  #              or a git hook to checkout and build hugo websites maintained
  #              in git repos.
  #
  # Usage: hugo-git-builder.py sites.json site
  #        sites.json = json file with config details for every website
  #        site = site to process (optional)
  #
  # NOTE: This file is generated from hugo-git-builder.org.  Any updates
  #       to the code should be made to that file.
  #

#+end_src

* Import libraries

This is a simple script and as such does need much in the way of
library support.  os and sys are there for basic file system tasks (do
I need both?).  The config file is in json format so that is included
in (I wonder about doing a library that would work with config
regardless whether they are in json, toml, etc. format; could be a key
component of the json editor idea I have).  And datatime is imported for ??

#+begin_src python

  import os
  import sys
  import json
  from datetime import datetime
  
#+end_src

* Initialize variable

Probably need to read these values from a config file

#+begin_src python

  #tmp_dir = '/var/tmp/hgb-tmp1234'
  tmp_dir = '/home/srk/tmp/hgb-tmp1234'
  # hugo_pgm = '/home/linuxbrew/.linuxbrew/bin/hugo'
  hugo_pgm = '/snap/bin/hugo'

#+end_src

* Load parameters

Here is some basic code to load the parameters for the script.  Since
there are only a copy of parameters I am not using any library to
process the command line parameters.

A function for processing the command line for script parameters.

The script only takes two positional parameters:

- The first parameter is required and is the path and name of a JSON
  config file.
- The second parameter is option.  If provided it should reference a
  site defined in the config file and would be the only site processed
  from the config file.

If no valid parameters are provided, print a help screen and exit.

The script first tests for their being at least one parameater and
that it is a valid JSON file.  Then test for a second parameter.  Any
invalid input calls a function to display an error message and a help
screen.

#+begin_src python

  def process_commandline():
      if len(sys.argv) > 1:
          try:
              with open(sys.argv[1]) as config_src_file:
                  builder_config = json.load(config_src_file)
          except FileNotFoundError:
              # need to rework this into call a help display function (and maybe error code)
              print('ERROR: Site config file not found')
              return
       else:
           print('ERROR: Site config file not found')
           return
#+end_src

Main Loop

Probably too much in main at the moment

#+begin_src python

  def main():
      print('** hugo git builder - ', datetime.now())
      if len(sys.argv) > 1:
          try:
              with open(sys.argv[1]) as config_src_file:
                  sites_config = json.load(config_src_file)
          except FileNotFoundError:
              print('ERROR: Site config file not found')
              return
      else:
          print('ERROR: No parameters privded.')
          return
      if len(sys.argv) > 2:
          cur_site = sys.argv[2]
          for site_key in list (sites_config):
              if site_key == cur_site:
                  deploy_site(site_key, sites_config[site_key])
                  return
          print('ERROR: Site not found in config file.')
          return
      for site_key in list(sites_config):
          deploy_site(site_key, sites_config[site_key])

#+end_src

* Function: deploy_site

#+begin_src python

  def deploy_site(website, site_conf):
      print('Deploying website ' + website)
      os.system('mkdir ' + tmp_dir)
      os.system('git -C ' + site_conf['git_repo'] +
                ' archive ' + site_conf['git_branch'] +
                ' | (cd ' + tmp_dir + ' && tar xf -)')
      #os.system('git -C ' + site_conf['git_repo'] + ' archive ' + site_conf['git_branch'] + ' --prefix=' + tmp_dir)
      #os.system('cd ' + tmp_dir +
      #          ' && cd ' + site_conf['git_site_dir'] +
      #          ' && ' + hugo_pgm + ' --cleanDestinationDir -d ' + site_conf['website_dir'])
      os.system('cd ' + tmp_dir + ' && cd ' + site_conf['git_site_dir'] + ' && ' + hugo_pgm )
      os.system('rsync -a --delete ' + tmp_dir + '/' + site_conf['git_site_dir'] + '/public/ ' + site_conf['website_dir'])
      os.system('rm -rf ' + tmp_dir)

#+end_src

* EOF Call Main Loop

Standard closing lines for a Python script to call the main loop.

#+begin_src python

  if __name__ == '__main__':
                  main()

#+end_src
